//========================================
// 
// CHR:プレイヤーの処理
// Author:RIKU NISHIMURA
// 
//========================================
// *** chr_player.cpp ***
//========================================
#include <stdio.h>
#include "main.h"

#include "chr_player.h"	// CHR:プレイヤー
// R.N.Lib
#include "_R.N.Lib/R.N.Lib.h"

//****************************************
// マクロ定義
//****************************************
// CHR:プレイヤーの初期向き
#define CHR_PLAYER_INIT_ROT D3DXVECTOR3(0.0f,D3DX_PI,0.0f)
// CHR:プレイヤーの注視点の相対位置の移動倍率
#define CHR_PLAYER_RELATIVE_POS_R_MOVE_DIAMETER (0.25f)
// CHR:プレイヤーのモデルのセットアップ番号
#define CHR_PLAYER_MODEL_SETUP (3)

//****************************************
// プロトタイプ宣言
//****************************************
//========== *** 取得 ***
// CHR:プレイヤーのパラメーターの初期値を返す
void InitParameterChr_player(Chr_player *pChr);

//****************************************
// グローバル宣言
//****************************************
// CHR:プレイヤーの情報
Chr_player g_chr_player;

//================================================================================
//----------|---------------------------------------------------------------------
//==========| cppファイルの占有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// InitParameterChr_player関数 - CHR:プレイヤーのパラメーターの初期値を返す -
//========================================
void InitParameterChr_player(Chr_player *pChr)
{
	// 部品管理のパラメーター初期化
	InitParts3DInfo(&pChr->partsInfo, CHR_PLAYER_MODEL_SETUP);
}

//================================================================================
//----------|---------------------------------------------------------------------
//==========| hファイルの共有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 基本接続 *** |--------------------
//============================================================
//========================================
// InitChr_player関数 - CHR:プレイヤーの初期化処理 -
//========================================
void InitChr_player(void)
{
	// CHR:プレイヤーの情報のポインタ
	Chr_player *pChr = &g_chr_player;

	// パラメーターの初期化
	InitParameterChr_player(pChr);
}

//========================================
// UpdateChr_player関数 - CHR:プレイヤーの更新処理 -
//========================================
void UpdateChr_player(void)
{
	// CHR:プレイヤーの情報のポインタ
	Chr_player *pChr = &g_chr_player;
	// プレイヤーのセットアップ情報
	ModelSetUp setUp = GetModelSetUp(CHR_PLAYER_MODEL_SETUP);

	// 部品(3D)の更新処理
	UpdateParts3DInfo(&pChr->partsInfo);

	// 衝突判定に必要な情報を作成
	CollisionInfo myCollInfo =
	{
		&pChr->partsInfo.pos,			// 現在の位置のポインタ
		pChr->partsInfo.pos,			// 過去の位置
		NULL,							// 移動量のポインタ
		&pChr->partsInfo.rot,			// 現在の向きのポインタ
		pChr->partsInfo.rot,			// 過去の向き
		&pChr->partsInfo,				// 部品管理情報
		&setUp.partsSet,				// 部品設定情報
		&setUp.hitTestSet.aHitTest[0],	// 当たり判定の情報
		(COLLCHK_MODE)0,				// 衝突チェックのモード
	};
}

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// GetChr_player関数 - CHR:プレイヤーの情報のポインタを取得 -
//========================================
Chr_player *GetChr_player(void)
{
	return &g_chr_player;
}