//========================================
// 
// MD:タイトルの処理
// Author:RIKU NISHIMURA
// 
//========================================
// *** md_title.cpp ***
//========================================
#include "md_title.h"
#include "../_R.N.Lib/R.N.Lib.h"

//****************************************
// マクロ定義
//****************************************
//========== *** 状態関連 ***
// 初期の状態
#define INIT_STATE (MD_TITLE_STATE_NORMAL)

//****************************************
// プロトタイプ宣言
//****************************************
//========== *** 取得 ***
// MD:タイトルのパラメーター初期化
void InitParameterMd_title(Md_title *pMd);

//****************************************
// グローバル変数宣言
//****************************************
Md_title g_md_title;	// MD:タイトルの情報

//================================================================================
//----------|---------------------------------------------------------------------
//==========| cppファイルの占有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 基本接続 *** |--------------------
//============================================================

//========================================
// StartMd_titleState関数 - MD:タイトル画面の状態に応じた開始処理 -
//========================================
void StartMd_titleState(void)
{
	// MD:タイトル画面の情報のポインタ
	Md_title *pMd = &g_md_title;

	switch (pMd->state)
	{
	case MD_TITLE_STATE_NORMAL:

		break;
	}
}

//========================================
// EndMd_titleState関数 - MD:タイトル画面の状態に応じた終了処理 -
//========================================
void EndMd_titleState(void)
{
	// MD:タイトル画面の情報のポインタ
	Md_title *pMd = &g_md_title;

	switch (pMd->state)
	{
	case MD_TITLE_STATE_NORMAL:

		break;
	}
}

//========================================
// UpdateMd_titleState関数 - MD:タイトル画面の状態に応じた更新処理 -
//========================================
void UpdateMd_titleState(void)
{
	// MD:タイトル画面の情報のポインタ
	Md_title *pMd = &g_md_title;

	switch (pMd->state)
	{
	case MD_TITLE_STATE_NORMAL:

		break;
	}
}

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================

//========================================
// InitParameterMd_title関数 - MD:タイトルのパラメーター初期化 -
// Author:RIKU NISHIMURA
//========================================
void InitParameterMd_title(Md_title *pMd)
{
	pMd->state = MD_TITLE_STATE_NONE;	// 状態
}

//================================================================================
//----------|---------------------------------------------------------------------
//==========| hファイルの共有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 基本接続 *** |--------------------
//============================================================

//========================================
// InitMd_title関数 - MD:タイトルの初期化処理 -
// Author:RIKU NISHIMURA
//========================================
void InitMd_title(void) 
{
	// MD:タイトル画面の情報のポインタ
	Md_title *pMd = &g_md_title;

	// パラメーター初期化
	InitParameterMd_title(pMd);

	// 初期状態を設定
	SetStateMd_title(INIT_STATE);
}

//========================================
// UninitMd_title関数 - MD:タイトルの終了処理 -
// Author:RIKU NISHIMURA
//========================================
void UninitMd_title(void) 
{

}

//========================================
// UpdateMd_title関数 - MD:タイトルの更新処理 -
// Author:RIKU NISHIMURA
//========================================
void UpdateMd_title(void) 
{
	// 状態に応じた更新処理
	UpdateMd_titleState();
}

//========================================
// DrawMd_title関数 - MD:タイトルの描画処理 -
// Author:RIKU NISHIMURA
//========================================
void DrawMd_title(void)
{

}

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// GetMd_title関数 - MD:タイトルの情報を取得 -
// Author:RIKU NISHIMURA
//========================================
Md_title *GetMd_title(void) 
{
	return &g_md_title;
}

//============================================================
//--------------------| *** 設定 *** |------------------------
//============================================================

//========================================
// SetStateMd_title関数 - MD:タイトルの状態設定処理 -
// Author:RIKU NISHIMURA
//========================================
void SetStateMd_title(MD_TITLE_STATE state)
{
	// MD:タイトル画面の情報のポインタ
	Md_title *pMd = &g_md_title;

	// 状態に応じた終了処理
	EndMd_titleState();
	
	// 状態を代入
	pMd->state = state;

	// 状態に応じた開始処理
	StartMd_titleState();
}