//========================================
// 
// マップ生成(3D)の処理
// Author:RIKU NISHIMURA
// 
//========================================
// *** map-generator3D.cpp ***
//========================================
// R.N.Lib
#include "../../R.N.Lib.h"

//****************************************
// プロトタイプ宣言
//****************************************
//========== *** マップ管理 ***
// マップクリア処理
void MapClear(void);

//****************************************
// グローバル変数宣言
//****************************************
MapSet3D g_mapSet3D;	// マップ設定情報(3D)

//================================================================================
//----------|---------------------------------------------------------------------
//==========| cppファイルの占有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** マップ管理 *** |------------------
//============================================================
//========================================
// MapClear関数 - マップクリア処理 -
// Author:RIKU NISHIMURA
//========================================
void MapClear(void) 
{
	// クリア
	ClearMapChip3D();	// マップチップ(3D)
}

//================================================================================
//----------|---------------------------------------------------------------------
//==========| hファイルの共有関数
//----------|---------------------------------------------------------------------
//================================================================================

//============================================================
//--------------------| *** 基本接続 *** |--------------------
//============================================================
//========================================
// InitMapGenerator3D関数 - マップ生成(3D)の初期化 -
// Author:RIKU NISHIMURA
//========================================
void InitMapGenerator3D(void)
{
	// マップ設定情報(3D)のパラメーターの初期化
	g_mapSet3D = InitParameterMapSet3D();
}

//============================================================
//--------------------| *** 取得 *** |------------------------
//============================================================
//========================================
// GetMapSet関数 - マップ設定情報(3D)のポインタ取得 -
// Author:RIKU NISHIMURA
//========================================
MapSet3D *GetMapSet(void)
{
	return &g_mapSet3D;
}

//========================================
// InitParameterMapSet3D関数 - マップ設定情報(3D)のパラメーター初期値を返す -
// Author:RIKU NISHIMURA
//========================================
MapSet3D InitParameterMapSet3D(void)
{
	MapSet3D mapSet =
	{
		{},	// マップチップ(3D)設定情報
		0,	// マップチップ(3D)の設定数
	};

	// マップチップ(3D)設定情報初期化
	for (int nCntObj3D = 0; nCntObj3D < MAPCHIP3D_MAX; nCntObj3D++)
	{
		mapSet.aObj3DSet[nCntObj3D] = 
		{
			INITD3DXVECTOR3,	// 位置
			INITD3DXVECTOR3,	// 向き
			0,					// 種類
		};
	}

	return mapSet;
}

//============================================================
//--------------------| *** 入出力 *** |----------------------
//============================================================
//========================================
// LoadMapData関数 - マップ情報の読み込み処理 -
// Author:RIKU NISHIMURA
//========================================
void LoadMapData(char *pPath)
{
	FILE *pFile;				// ファイルのポインタ
	char aDataSearch[TXT_MAX];	// 検索用文字列
	
	// ファイルを開く
	pFile = fopen(pPath, "r");

	if (pFile != NULL)
	{// ファイルが開けた場合、
		// マップをクリア
		MapClear();

		// マップチップ(3D)設定情報を読み込み
		{
			g_mapSet3D = InitParameterMapSet3D();
			Obj3DSet *pObj3DSet = g_mapSet3D.aObj3DSet;

			while (1)
			{
				fscanf(pFile, "%s", aDataSearch); // 検索
				
				if (!strcmp(aDataSearch, "OBJ3DSET_END"))
				{
					break;
				}
				else if (!strcmp(aDataSearch, "SET"))
				{
					// マップチップ(3D)設定情報を読み込み
					fscanf(pFile, "%f", &pObj3DSet->pos.x);	// 位置X
					fscanf(pFile, "%f", &pObj3DSet->pos.y);	// 位置Y
					fscanf(pFile, "%f", &pObj3DSet->pos.z);	// 位置Z
					fscanf(pFile, "%f", &pObj3DSet->rot.x);	// 向きX
					fscanf(pFile, "%f", &pObj3DSet->rot.y);	// 向きY
					fscanf(pFile, "%f", &pObj3DSet->rot.z);	// 向きZ
					fscanf(pFile, "%d", &pObj3DSet->nType);	// 種類
					SetMapChip3D(	// マップチップ(3D)を設定
						pObj3DSet->pos,
						pObj3DSet->rot,
						pObj3DSet->nType,
						0);
					pObj3DSet++;
					g_mapSet3D.nObj3DNum++;
				}
			}
		}
		
		 // ファイルを閉じる
		fclose(pFile);
	}
	else
	{// ファイルが開けなかった場合

	}
}

//========================================
// SaveMapData関数 - マップ情報の書き込み処理 -
// Author:RIKU NISHIMURA
//========================================
void SaveMapData(char *pPath)
{
	FILE *pFile; // ファイルのポインタ

	// ファイルを開く
	pFile = fopen(pPath, "w");

	if (pFile != NULL)
	{// ファイルが開けた場合、
		{// マップチップ(3D)設定情報を書き込み
			Obj3DSet *pObj3DSet = g_mapSet3D.aObj3DSet;

			for (int nCntObj3D = 0; nCntObj3D < g_mapSet3D.nObj3DNum; nCntObj3D++, pObj3DSet++)
			{
				fprintf(pFile, "SET %f %f %f %f %f %f %d\n",
					pObj3DSet->pos.x,	// 位置X
					pObj3DSet->pos.y,	// 位置Y
					pObj3DSet->pos.z,	// 位置Z
					pObj3DSet->rot.x,	// 向きX
					pObj3DSet->rot.y,	// 向きY
					pObj3DSet->rot.z,	// 向きZ
					pObj3DSet->nType	// 種類
				);
			}
			fprintf(pFile, "OBJ3DSET_END\n");
		}

		// ファイルを閉じる
		fclose(pFile);
	}
	else
	{// ファイルが開けなかった場合

	}
}